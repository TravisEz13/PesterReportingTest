<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="235" errors="0" failures="0" not-run="0" inconclusive="14" ignored="8" skipped="0" invalid="0" date="2025-01-30" time="19:49:45">
  <environment platform="Microsoft Windows Server 2022 Datacenter|C:\Windows|\Device\Harddisk0\Partition2" user-domain="fv-az534-639" nunit-version="2.5.8.0" machine-name="fv-az534-639" clr-version="Unknown" cwd="D:\a\PowerShell\PowerShell" os-version="10.0.20348" user="runneradmin" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Ignored" success="True" time="271.8324" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\BasicEngine.Tests.ps1" executed="True" result="Success" success="True" time="0.0599" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\BasicEngine.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\GetMethodInfoOverloadDefinition.Tests.ps1" executed="True" result="Success" success="True" time="0.0098" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\GetMethodInfoOverloadDefinition.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\GetNewClosure.Tests.ps1" executed="True" result="Success" success="True" time="0.0054" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\GetNewClosure.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\InitialSessionState.Tests.ps1" executed="True" result="Success" success="True" time="0.01" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\InitialSessionState.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\LanguagePrimitive.Tests.ps1" executed="True" result="Success" success="True" time="0.0102" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\LanguagePrimitive.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\ProxyCommand.Tests.ps1" executed="True" result="Success" success="True" time="0.0088" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\ProxyCommand.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\PSCommand.Tests.ps1" executed="True" result="Success" success="True" time="0.0056" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\PSCommand.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\Serialization.Tests.ps1" executed="True" result="Success" success="True" time="0.0458" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\Serialization.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\SuspiciousContentChecker.Tests.ps1" executed="True" result="Success" success="True" time="0.0154" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\SuspiciousContentChecker.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\TaskBasedAsyncPowerShellAPI.Tests.ps1" executed="True" result="Success" success="True" time="0.0076" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\TaskBasedAsyncPowerShellAPI.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\TypeInference.Tests.ps1" executed="True" result="Success" success="True" time="0.1221" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Api\TypeInference.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Assembly.LoadBytesAndLoadFile.Tests.ps1" executed="True" result="Success" success="True" time="0.0062" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Assembly.LoadBytesAndLoadFile.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Assembly.LoadedInSeparateALC.Tests.ps1" executed="True" result="Success" success="True" time="0.0058" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Assembly.LoadedInSeparateALC.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Assembly.LoadFrom.Tests.ps1" executed="True" result="Success" success="True" time="0.0072" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Assembly.LoadFrom.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Assembly.LoadNative.Tests.ps1" executed="True" result="Success" success="True" time="0.0058" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Assembly.LoadNative.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Assembly.LoadWithPartialName.Tests.ps1" executed="True" result="Success" success="True" time="0.0059" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Assembly.LoadWithPartialName.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Attributes.Tests.ps1" executed="True" result="Success" success="True" time="0.007" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Attributes.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\CLRBinding.Tests.ps1" executed="True" result="Success" success="True" time="0.0105" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\CLRBinding.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\CommandDiscovery.Tests.ps1" executed="True" result="Success" success="True" time="0.0076" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\CommandDiscovery.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Credential.Tests.ps1" executed="True" result="Success" success="True" time="0.0046" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Credential.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\DefaultCommands.Tests.ps1" executed="True" result="Success" success="True" time="0.014" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\DefaultCommands.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Encoding.Tests.ps1" executed="True" result="Success" success="True" time="0.0068" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Encoding.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\GroupPolicySettings.Tests.ps1" executed="True" result="Success" success="True" time="39.681" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\GroupPolicySettings.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Group policy settings tests" executed="True" result="Success" success="True" time="39.6514" asserts="0" description="Group policy settings tests">
            <results>
              <test-suite type="TestFixture" name="Group policy settings tests" executed="True" result="Success" success="True" time="39.5586" asserts="0" description="Group policy settings tests">
                <results>
                  <test-case description="Execution policy test" name="Group policy settings tests.Group policy settings tests.Execution policy test" time="0.125" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Module logging policy test" name="Group policy settings tests.Group policy settings tests.Module logging policy test" time="9.4084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ScriptBlock logging policy test" name="Group policy settings tests.Group policy settings tests.ScriptBlock logging policy test" time="2.0654" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Transcription policy test" name="Group policy settings tests.Group policy settings tests.Transcription policy test" time="0.7061" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Default SourcePath on Update-Help policy test" name="Group policy settings tests.Group policy settings tests.Default SourcePath on Update-Help policy test" time="2.4616" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Session configuration policy test" name="Group policy settings tests.Group policy settings tests.Session configuration policy test" time="24.5985" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\NativeCommandBytePiping.Tests.ps1" executed="True" result="Success" success="True" time="0.0188" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\NativeCommandBytePiping.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\NativeCommandErrorHandling.Tests.ps1" executed="True" result="Success" success="True" time="0.0064" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\NativeCommandErrorHandling.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\PropertyAccessor.Tests.ps1" executed="True" result="Success" success="True" time="0.0052" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\PropertyAccessor.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\ProxyCommand.tests.ps1" executed="True" result="Success" success="True" time="0.0054" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\ProxyCommand.tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\SemanticVersion.Tests.ps1" executed="True" result="Success" success="True" time="0.0088" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\SemanticVersion.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\StandardLibraryTypes.Tests.ps1" executed="True" result="Success" success="True" time="0.0052" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\StandardLibraryTypes.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Telemetry.Tests.ps1" executed="True" result="Success" success="True" time="0.0057" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\Telemetry.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\TypeResolution.Tests.ps1" executed="True" result="Success" success="True" time="0.0055" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\TypeResolution.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\ValidateAttributes.Tests.ps1" executed="True" result="Success" success="True" time="0.0126" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Basic\ValidateAttributes.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Cdxml\Cdxml.Tests.ps1" executed="True" result="Success" success="True" time="1.5487" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Cdxml\Cdxml.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Cdxml cmdlets are supported" executed="True" result="Success" success="True" time="1.5391" asserts="0" description="Cdxml cmdlets are supported">
            <results>
              <test-suite type="TestFixture" name="Module level tests" executed="True" result="Success" success="True" time="0.036" asserts="0" description="Module level tests">
                <results>
                  <test-case description="The CimTest module should have been loaded" name="Cdxml cmdlets are supported.Module level tests.The CimTest module should have been loaded" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The CimTest module should have the proper cmdlets" name="Cdxml cmdlets are supported.Module level tests.The CimTest module should have the proper cmdlets" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-CimTest cmdlet" executed="True" result="Success" success="True" time="0.1632" asserts="0" description="Get-CimTest cmdlet">
                <results>
                  <test-case description="The Get-CimTest cmdlet should return 4 objects" name="Cdxml cmdlets are supported.Get-CimTest cmdlet.The Get-CimTest cmdlet should return 4 objects" time="0.0302" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The Get-CimTest cmdlet should retrieve an object via id" name="Cdxml cmdlets are supported.Get-CimTest cmdlet.The Get-CimTest cmdlet should retrieve an object via id" time="0.013" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The Get-CimTest cmdlet should retrieve an object by piped id" name="Cdxml cmdlets are supported.Get-CimTest cmdlet.The Get-CimTest cmdlet should retrieve an object by piped id" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The Get-CimTest cmdlet should retrieve an object by datetime" name="Cdxml cmdlets are supported.Get-CimTest cmdlet.The Get-CimTest cmdlet should retrieve an object by datetime" time="0.0274" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The Get-CimTest cmdlet should return the proper error if the instance does not exist" name="Cdxml cmdlets are supported.Get-CimTest cmdlet.The Get-CimTest cmdlet should return the proper error if the instance does not exist" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The Get-CimTest cmdlet should work as a job" name="Cdxml cmdlets are supported.Get-CimTest cmdlet.The Get-CimTest cmdlet should work as a job" time="0.0132" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should be possible to invoke a method on an object returned by Get-CimTest" name="Cdxml cmdlets are supported.Get-CimTest cmdlet.Should be possible to invoke a method on an object returned by Get-CimTest" time="0.0171" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Remove-CimTest cmdlet" executed="True" result="Success" success="True" time="0.1845" asserts="0" description="Remove-CimTest cmdlet">
                <results>
                  <test-case description="The Remote-CimTest cmdlet should remove objects by id" name="Cdxml cmdlets are supported.Remove-CimTest cmdlet.The Remote-CimTest cmdlet should remove objects by id" time="0.0683" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The Remove-CimTest cmdlet should remove piped objects" name="Cdxml cmdlets are supported.Remove-CimTest cmdlet.The Remove-CimTest cmdlet should remove piped objects" time="0.0398" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The Remove-CimTest cmdlet should work as a job" name="Cdxml cmdlets are supported.Remove-CimTest cmdlet.The Remove-CimTest cmdlet should work as a job" time="0.0429" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="New-CimTest operations" executed="True" result="Success" success="True" time="0.0669" asserts="0" description="New-CimTest operations">
                <results>
                  <test-case description="Should create a new instance" name="Cdxml cmdlets are supported.New-CimTest operations.Should create a new instance" time="0.0251" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the proper error if called with an improper value" name="Cdxml cmdlets are supported.New-CimTest operations.Should return the proper error if called with an improper value" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should support -whatif" name="Cdxml cmdlets are supported.New-CimTest operations.Should support -whatif" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Set-CimTest operations" executed="True" result="Success" success="True" time="0.0894" asserts="0" description="Set-CimTest operations">
                <results>
                  <test-case description="Should set properties on an instance" name="Cdxml cmdlets are supported.Set-CimTest operations.Should set properties on an instance" time="0.0406" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should set properties on an instance via pipeline" name="Cdxml cmdlets are supported.Set-CimTest operations.Should set properties on an instance via pipeline" time="0.024" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\COM\COM.Basic.Tests.ps1" executed="True" result="Success" success="True" time="0.0046" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\COM\COM.Basic.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ETS\Adapter.Tests.ps1" executed="True" result="Success" success="True" time="0.0086" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ETS\Adapter.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ETS\CimAdapter.Tests.ps1" executed="True" result="Success" success="True" time="0.0043" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ETS\CimAdapter.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ETS\TypeTable.Tests.ps1" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ETS\TypeTable.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ExperimentalFeature\EnableDisable-ExperimentalFeature.Tests.ps1" executed="True" result="Success" success="True" time="0.0129" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ExperimentalFeature\EnableDisable-ExperimentalFeature.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ExperimentalFeature\ExperimentalFeature.Basic.Tests.ps1" executed="True" result="Success" success="True" time="0.006" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ExperimentalFeature\ExperimentalFeature.Basic.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ExperimentalFeature\Get-ExperimentalFeature.Tests.ps1" executed="True" result="Success" success="True" time="0.0063" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ExperimentalFeature\Get-ExperimentalFeature.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Formatting\BugFix.Tests.ps1" executed="True" result="Success" success="True" time="0.0048" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Formatting\BugFix.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Formatting\ErrorView.Tests.ps1" executed="True" result="Success" success="True" time="0.0055" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Formatting\ErrorView.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Formatting\OutputRendering.Tests.ps1" executed="True" result="Success" success="True" time="0.0041" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Formatting\OutputRendering.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Formatting\PSStyle.Tests.ps1" executed="True" result="Success" success="True" time="0.0077" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Formatting\PSStyle.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Help\HelpSystem.OnlineHelp.Tests.ps1" executed="True" result="Success" success="True" time="0.0053" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Help\HelpSystem.OnlineHelp.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Help\HelpSystem.Tests.ps1" executed="True" result="Success" success="True" time="24.3778" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Help\HelpSystem.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Validate about_help.txt under culture specific folder works" executed="True" result="Success" success="True" time="24.3538" asserts="0" description="Validate about_help.txt under culture specific folder works">
            <results>
              <test-case description="Get-Help should return help text and not multiple HelpInfo objects when help is under $PSHOME path" name="Validate about_help.txt under culture specific folder works.Get-Help should return help text and not multiple HelpInfo objects when help is under $PSHOME path" time="23.7399" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Get-Help for about_Variable should return only one help object" name="Validate about_help.txt under culture specific folder works.Get-Help for about_Variable should return only one help object" time="0.1441" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Help\UpdatableHelpSystem.Tests.ps1" executed="True" result="Success" success="True" time="31.7772" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Help\UpdatableHelpSystem.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Validate Update-Help from the Web for one PowerShell module." executed="True" result="Success" success="True" time="1.3529" asserts="0" description="Validate Update-Help from the Web for one PowerShell module.">
            <results>
              <test-case description="Validate Update-Help for module 'Microsoft.PowerShell.Core' in AllUsers" name="Validate Update-Help from the Web for one PowerShell module..Validate Update-Help for module 'Microsoft.PowerShell.Core' in AllUsers" time="1.3239" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Validate Update-Help from the Web for one PowerShell module for user scope." executed="True" result="Success" success="True" time="1.935" asserts="0" description="Validate Update-Help from the Web for one PowerShell module for user scope.">
            <results>
              <test-case description="Validate Update-Help for module 'Microsoft.PowerShell.Core' in CurrentUser" name="Validate Update-Help from the Web for one PowerShell module for user scope..Validate Update-Help for module 'Microsoft.PowerShell.Core' in CurrentUser" time="1.9167" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Validate Update-Help -SourcePath for one PowerShell module." executed="True" result="Success" success="True" time="0.422" asserts="0" description="Validate Update-Help -SourcePath for one PowerShell module.">
            <results>
              <test-case description="Validate Update-Help for module 'Microsoft.PowerShell.Core' in AllUsers" name="Validate Update-Help -SourcePath for one PowerShell module..Validate Update-Help for module 'Microsoft.PowerShell.Core' in AllUsers" time="0.4033" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Validate Update-Help -SourcePath for one PowerShell module for user scope." executed="True" result="Success" success="True" time="0.3856" asserts="0" description="Validate Update-Help -SourcePath for one PowerShell module for user scope.">
            <results>
              <test-case description="Validate Update-Help for module 'Microsoft.PowerShell.Core' in CurrentUser" name="Validate Update-Help -SourcePath for one PowerShell module for user scope..Validate Update-Help for module 'Microsoft.PowerShell.Core' in CurrentUser" time="0.3644" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Validate 'Save-Help -DestinationPath for one PowerShell modules." executed="True" result="Success" success="True" time="0.889" asserts="0" description="Validate 'Save-Help -DestinationPath for one PowerShell modules.">
            <results>
              <test-case description="Validate Save-Help for the 'Microsoft.PowerShell.Core' module" name="Validate 'Save-Help -DestinationPath for one PowerShell modules..Validate Save-Help for the 'Microsoft.PowerShell.Core' module" time="0.8654" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Job\Jobs.Tests.ps1" executed="True" result="Success" success="True" time="0.005" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Job\Jobs.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\IsolatedModule.Tests.ps1" executed="True" result="Success" success="True" time="0.0052" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\IsolatedModule.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\ModulePath.Tests.ps1" executed="True" result="Success" success="True" time="6.2208" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\ModulePath.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ModuleIntrinsics.GetPSModulePath API tests" executed="True" result="Success" success="True" time="6.2147" asserts="0" description="ModuleIntrinsics.GetPSModulePath API tests">
            <results>
              <test-suite type="ParameterizedTest" name="ModuleIntrinsics.GetPSModulePath API tests.The current module path should contain the expected paths for '&lt;Name&gt;'" executed="True" result="Success" success="True" time="0.1257" asserts="0" description="The current module path should contain the expected paths for '&lt;Name&gt;'">
                <results>
                  <test-case description="The current module path should contain the expected paths for 'User'" name="ModuleIntrinsics.GetPSModulePath API tests.The current module path should contain the expected paths for 'User'" time="0.0621" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The current module path should contain the expected paths for 'Machine'" name="ModuleIntrinsics.GetPSModulePath API tests.The current module path should contain the expected paths for 'Machine'" time="0.0611" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The current module path should contain the expected paths for 'Builtin'" name="ModuleIntrinsics.GetPSModulePath API tests.The current module path should contain the expected paths for 'Builtin'" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="ModuleIntrinsics.GetPSModulePath API tests.The value '&lt;Name&gt;' should return the proper value" executed="True" result="Success" success="True" time="0.005" asserts="0" description="The value '&lt;Name&gt;' should return the proper value">
                <results>
                  <test-case description="The value 'User' should return the proper value" name="ModuleIntrinsics.GetPSModulePath API tests.The value 'User' should return the proper value" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The value 'Machine' should return the proper value" name="ModuleIntrinsics.GetPSModulePath API tests.The value 'Machine' should return the proper value" time="0.0009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The value 'Builtin' should return the proper value" name="ModuleIntrinsics.GetPSModulePath API tests.The value 'Builtin' should return the proper value" time="0.0013" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\ModuleSpecification.Tests.ps1" executed="True" result="Success" success="True" time="0.0063" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\ModuleSpecification.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\NewModuleManifest.Tests.ps1" executed="True" result="Success" success="True" time="0.0042" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\NewModuleManifest.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\SubmodulePathInManifest.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\SubmodulePathInManifest.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\TestModuleManifest.Tests.ps1" executed="True" result="Success" success="True" time="0.0056" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\TestModuleManifest.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\UpdateModuleManifest.Tests.ps1" executed="True" result="Success" success="True" time="0.0031" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Module\UpdateModuleManifest.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ParameterBinding\BooleanParameterDCR.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ParameterBinding\BooleanParameterDCR.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ParameterBinding\NullableBooleanDCR.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ParameterBinding\NullableBooleanDCR.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ParameterBinding\ParameterBinding.Tests.ps1" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ParameterBinding\ParameterBinding.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ParameterBinding\Splatting.Tests.ps1" executed="True" result="Success" success="True" time="0.0088" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ParameterBinding\Splatting.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ParameterBinding\StaticParameterBinder.Tests.ps1" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ParameterBinding\StaticParameterBinder.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\CustomConnection.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\CustomConnection.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\InvokeCommandRemoteDebug.Tests.ps1" executed="True" result="Success" success="True" time="0.0046" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\InvokeCommandRemoteDebug.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\PSSession.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\PSSession.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\RemoteSession.Basic.Tests.ps1" executed="True" result="Success" success="True" time="36.1574" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\RemoteSession.Basic.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="JEA session Get-Help test" executed="True" result="Success" success="True" time="29.5857" asserts="0" description="JEA session Get-Help test">
            <results>
              <test-case description="Get-Help should work in JEA sessions" name="JEA session Get-Help test.Get-Help should work in JEA sessions" time="1.869" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="JEA session Get-Help test.Get-Help should throw &lt;ExpectedError&gt; on &lt;command&gt;" executed="True" result="Success" success="True" time="18.6576" asserts="0" description="Get-Help should throw &lt;ExpectedError&gt; on &lt;command&gt;">
                <results>
                  <test-case description="Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on //fakehost/share/test.dll" name="JEA session Get-Help test.Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on //fakehost/share/test.dll" time="4.0612" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on //fakehost/share/test.dll\fakecommand" name="JEA session Get-Help test.Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on //fakehost/share/test.dll\fakecommand" time="1.8383" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on //fakehost/share/test.ps1" name="JEA session Get-Help test.Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on //fakehost/share/test.ps1" time="1.827" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on //fakehost\share/test.ps1" name="JEA session Get-Help test.Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on //fakehost\share/test.ps1" time="1.8368" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on \\fakehost.pstest\share\test.ps1" name="JEA session Get-Help test.Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on \\fakehost.pstest\share\test.ps1" time="1.8039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on \\fakehost\share\test.ps1" name="JEA session Get-Help test.Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on \\fakehost\share\test.ps1" time="1.8233" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on filesystem:://fakehost/share/test.ps1" name="JEA session Get-Help test.Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on filesystem:://fakehost/share/test.ps1" time="1.8351" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on Microsoft.PowerShell.Core\filesystem:://fakehost/share/test.ps1" name="JEA session Get-Help test.Get-Help should throw CommandNameNotAllowed,Microsoft.PowerShell.Commands.GetHelpCommand on Microsoft.PowerShell.Core\filesystem:://fakehost/share/test.ps1" time="1.8358" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-Help should throw ScriptsNotAllowed on //;LanmanRedirector/fakehost/share/test.dll\fakecommand" name="JEA session Get-Help test.Get-Help should throw ScriptsNotAllowed on //;LanmanRedirector/fakehost/share/test.dll\fakecommand" time="1.7961" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Remoting loopback tests" executed="True" result="Success" success="True" time="6.562" asserts="0" description="Remoting loopback tests">
            <results>
              <test-case description="Can connect to default endpoint" name="Remoting loopback tests.Can connect to default endpoint" time="0.3074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can execute command in a disconnected session" name="Remoting loopback tests.Can execute command in a disconnected session" time="0.3674" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can disconnect and connect to PSSession" name="Remoting loopback tests.Can disconnect and connect to PSSession" time="0.3606" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can execute command if one of the sessions is available" name="Remoting loopback tests.Can execute command if one of the sessions is available" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can execute command without creating new scope" name="Remoting loopback tests.Can execute command without creating new scope" time="0.0015" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can execute command from a file" name="Remoting loopback tests.Can execute command from a file" time="0.0148" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can invoke-command as job" name="Remoting loopback tests.Can invoke-command as job" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can connect to all disconnected sessions by name" name="Remoting loopback tests.Can connect to all disconnected sessions by name" time="0.771" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can pass values through $using" name="Remoting loopback tests.Can pass values through $using" time="0.0219" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="$Host.Version should be PSVersion" name="Remoting loopback tests.$Host.Version should be PSVersion" time="0.4072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Language Mode is FullLanguage by default" name="Remoting loopback tests.Language Mode is FullLanguage by default" time="0.3682" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Remoting loopback tests.&lt;title&gt;" executed="True" result="Success" success="True" time="0.0099" asserts="0" description="&lt;title&gt;">
                <results>
                  <test-case description="Cannot use InDisconnectedState and AsJob together" name="Remoting loopback tests.Cannot use InDisconnectedState and AsJob together" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cannot use SessionName without InDisconnectedSession" name="Remoting loopback tests.Cannot use SessionName without InDisconnectedSession" time="0.0018" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cannot use Invoke-Command on a disconnected session" name="Remoting loopback tests.Cannot use Invoke-Command on a disconnected session" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cannot use Invoke-Command on a closed session" name="Remoting loopback tests.Cannot use Invoke-Command on a closed session" time="0.0016" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\RemoteSession.Disconnect.Tests.ps1" executed="True" result="Success" success="True" time="0.0053" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\RemoteSession.Disconnect.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\RoleCapabilityFiles.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\RoleCapabilityFiles.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\RunspacePool.Tests.ps1" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\RunspacePool.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\SessionOption.Tests.ps1" executed="True" result="Success" success="True" time="0.0043" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\SessionOption.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\SSHRemotingAPI.Tests.ps1" executed="True" result="Success" success="True" time="0.0209" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\SSHRemotingAPI.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\SSHRemotingCmdlets.Tests.ps1" executed="True" result="Success" success="True" time="0.0051" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Remoting\SSHRemotingCmdlets.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\CimCmdletsResources.Tests.ps1" executed="True" result="Success" success="True" time="0.0152" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\CimCmdletsResources.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\ConsoleHostResources.Tests.ps1" executed="True" result="Success" success="True" time="0.0065" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\ConsoleHostResources.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\DotNetEventingResources.Tests.ps1" executed="True" result="Success" success="True" time="0.0066" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\DotNetEventingResources.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\ManagementCommandsResources.Tests.ps1" executed="True" result="Success" success="True" time="0.0066" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\ManagementCommandsResources.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\SecurityResources.Tests.ps1" executed="True" result="Success" success="True" time="0.0079" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\SecurityResources.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\SMAResources.Tests.ps1" executed="True" result="Success" success="True" time="0.0072" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\SMAResources.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\UtilityResources.Tests.ps1" executed="True" result="Success" success="True" time="0.0156" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\UtilityResources.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\WSManResources.Tests.ps1" executed="True" result="Success" success="True" time="0.0077" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\ResourceValidation\WSManResources.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Security\FileSignature.Tests.ps1" executed="True" result="Success" success="True" time="0.0048" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Security\FileSignature.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\Security\UntrustedDataMode.Tests.ps1" executed="True" result="Success" success="True" time="0.0041" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\Security\UntrustedDataMode.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\engine\OrderedHashtable.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\engine\OrderedHashtable.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Host\TabCompletion\BugFix.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Host\TabCompletion\BugFix.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Host\TabCompletion\TabCompletion.Tests.ps1" executed="True" result="Success" success="True" time="0.0179" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Host\TabCompletion\TabCompletion.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Host\Base-Directory.Tests.ps1" executed="True" result="Success" success="True" time="0.029" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Host\Base-Directory.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Host\ConsoleHost.Tests.ps1" executed="True" result="Success" success="True" time="0.0121" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Host\ConsoleHost.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Host\HostUtilities.Tests.ps1" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Host\HostUtilities.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Host\Logging.Tests.ps1" executed="True" result="Success" success="True" time="3.0551" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Host\Logging.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Basic EventLog tests on Windows" executed="True" result="Success" success="True" time="3.0407" asserts="0" description="Basic EventLog tests on Windows">
            <results>
              <test-suite type="ParameterizedTest" name="Basic EventLog tests on Windows.Verifies scriptblock logging: &lt;name&gt;" executed="True" result="Success" success="True" time="2.7791" asserts="0" description="Verifies scriptblock logging: &lt;name&gt;">
                <results>
                  <test-case description="Verifies scriptblock logging: normal script block" name="Basic EventLog tests on Windows.Verifies scriptblock logging: normal script block" time="1.4386" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verifies scriptblock logging: script block with Null" name="Basic EventLog tests on Windows.Verifies scriptblock logging: script block with Null" time="1.3404" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Host\PSVersionTable.Tests.ps1" executed="True" result="Success" success="True" time="0.0041" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Host\PSVersionTable.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Host\Read-Host.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Host\Read-Host.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Host\ScreenReader.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Host\ScreenReader.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Host\Startup.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Host\Startup.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Installer\WindowsInstaller.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Installer\WindowsInstaller.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\ProtectedAccess.Tests.ps1" executed="True" result="Success" success="True" time="0.0212" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\ProtectedAccess.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.Attributes.Tests.ps1" executed="True" result="Success" success="True" time="0.009" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.Attributes.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.BasicParsing.Tests.ps1" executed="True" result="Success" success="True" time="0.0271" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.BasicParsing.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.Break.Tests.ps1" executed="True" result="Success" success="True" time="0.0044" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.Break.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.Exceptions.Tests.ps1" executed="True" result="Success" success="True" time="0.0051" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.Exceptions.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\scripting.Classes.inheritance.tests.ps1" executed="True" result="Success" success="True" time="0.0264" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\scripting.Classes.inheritance.tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.MiscOps.Tests.ps1" executed="True" result="Success" success="True" time="0.005" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.MiscOps.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.Modules.Tests.ps1" executed="True" result="Success" success="True" time="0.0044" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.Modules.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\scripting.Classes.NestedModules.tests.ps1" executed="True" result="Success" success="True" time="0.0043" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\scripting.Classes.NestedModules.tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.NoRunspaceAffinity.Tests.ps1" executed="True" result="Success" success="True" time="0.004" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.NoRunspaceAffinity.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.RunPath.Tests.ps1" executed="True" result="Success" success="True" time="0.0031" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.RunPath.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.StaticMethod.Tests.ps1" executed="True" result="Success" success="True" time="0.0049" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\Scripting.Classes.StaticMethod.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\scripting.Classes.using.tests.ps1" executed="True" result="Success" success="True" time="0.005" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\scripting.Classes.using.tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\scripting.enums.tests.ps1" executed="True" result="Success" success="True" time="0.0234" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Classes\scripting.enums.tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Interop\DotNet\DotNetAPI.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Interop\DotNet\DotNetAPI.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Interop\DotNet\DotNetInterop.Tests.ps1" executed="True" result="Success" success="True" time="0.022" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Interop\DotNet\DotNetInterop.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\ComparisonOperator.Tests.ps1" executed="True" result="Success" success="True" time="0.0041" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\ComparisonOperator.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\NullConditional.Tests.ps1" executed="True" result="Success" success="True" time="0.0044" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\NullConditional.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\PipelineChainOperator.Tests.ps1" executed="True" result="Success" success="True" time="0.0048" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\PipelineChainOperator.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\RangeOperator.Tests.ps1" executed="True" result="Success" success="True" time="0.004" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\RangeOperator.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\ReplaceOperator.Tests.ps1" executed="True" result="Success" success="True" time="0.004" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\ReplaceOperator.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\SplitOperator.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\SplitOperator.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\TernaryOperator.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Operators\TernaryOperator.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\Ast.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\Ast.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\AutomaticVariables.Tests.ps1" executed="True" result="Success" success="True" time="0.003" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\AutomaticVariables.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\BNotOperator.Tests.ps1" executed="True" result="Success" success="True" time="0.028" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\BNotOperator.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\Conversions.Tests.ps1" executed="True" result="Success" success="True" time="0.0312" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\Conversions.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\ExtensibleCompletion.Tests.ps1" executed="True" result="Success" success="True" time="0.0165" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\ExtensibleCompletion.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\LanguageAndParser.TestFollowup.Tests.ps1" executed="True" result="Success" success="True" time="0.0129" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\LanguageAndParser.TestFollowup.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\LineContinuance.Tests.ps1" executed="True" result="Success" success="True" time="0.004" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\LineContinuance.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\MethodInvocation.Tests.ps1" executed="True" result="Success" success="True" time="0.008" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\MethodInvocation.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\ParameterBinding.Tests.ps1" executed="True" result="Success" success="True" time="0.0059" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\ParameterBinding.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\Parser.Tests.ps1" executed="True" result="Success" success="True" time="0.0086" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\Parser.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\Parsing.Tests.ps1" executed="True" result="Success" success="True" time="0.0146" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\Parsing.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\RedirectionOperator.Tests.ps1" executed="True" result="Success" success="True" time="0.026" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\RedirectionOperator.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\TypeAccelerator.Tests.ps1" executed="True" result="Success" success="True" time="0.0054" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\TypeAccelerator.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\UsingAssembly.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\UsingAssembly.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\UsingNamespace.Tests.ps1" executed="True" result="Success" success="True" time="0.0093" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Parser\UsingNamespace.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Debugging\DebuggerCommand.Tests.ps1" executed="True" result="Success" success="True" time="0.0051" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Debugging\DebuggerCommand.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Debugging\DebuggerScriptTests.Tests.ps1" executed="True" result="Success" success="True" time="0.0077" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Debugging\DebuggerScriptTests.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Debugging\Debugging.Tests.ps1" executed="True" result="Success" success="True" time="0.0056" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Debugging\Debugging.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Debugging\DebuggingInHost.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Debugging\DebuggingInHost.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\I18n\I18n.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\I18n\I18n.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\NativeExecution\NativeCommandArguments.Tests.ps1" executed="True" result="Success" success="True" time="0.0072" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\NativeExecution\NativeCommandArguments.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\NativeExecution\NativeCommandProcessor.Tests.ps1" executed="True" result="Success" success="True" time="0.0063" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\NativeExecution\NativeCommandProcessor.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\NativeExecution\NativeLinuxCommands.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\NativeExecution\NativeLinuxCommands.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\NativeExecution\NativeStreams.Tests.ps1" executed="True" result="Success" success="True" time="0.0045" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\NativeExecution\NativeStreams.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\NativeExecution\NativeUnixGlobbing.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\NativeExecution\NativeUnixGlobbing.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\NativeExecution\NativeWindowsTildeExpansion.Tests.ps1" executed="True" result="Success" success="True" time="0.0034" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\NativeExecution\NativeWindowsTildeExpansion.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ActionPreference.Tests.ps1" executed="True" result="Success" success="True" time="0.0051" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ActionPreference.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Adapter.Tests.ps1" executed="True" result="Success" success="True" time="0.0107" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Adapter.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Array.Tests.ps1" executed="True" result="Success" success="True" time="0.0044" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Array.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\CheckRestrictedlanguage.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\CheckRestrictedlanguage.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\CleanBlockErrorHandling.Tests.ps1" executed="True" result="Success" success="True" time="0.0089" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\CleanBlockErrorHandling.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\CmdletDeclaration.Tests.ps1" executed="True" result="Success" success="True" time="0.0034" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\CmdletDeclaration.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\CommandErrorHandling.Tests.ps1" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\CommandErrorHandling.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\CommonParameters.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\CommonParameters.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ConstrainedLanguageMode.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ConstrainedLanguageMode.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Delegates.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Delegates.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\DeserializedMethods.Tests.ps1" executed="True" result="Success" success="True" time="0.0034" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\DeserializedMethods.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\DeserializedTypeConversion.Tests.ps1" executed="True" result="Success" success="True" time="0.0092" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\DeserializedTypeConversion.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\DollarHook.Tests.ps1" executed="True" result="Success" success="True" time="0.004" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\DollarHook.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Dynamicparameters.Tests.ps1" executed="True" result="Success" success="True" time="0.0042" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Dynamicparameters.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ErrorHistoryId.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ErrorHistoryId.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ErrorPosition.Tests.ps1" executed="True" result="Success" success="True" time="0.0134" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ErrorPosition.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ForeachParallel.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ForeachParallel.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Generics.Tests.ps1" executed="True" result="Success" success="True" time="0.0068" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Generics.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\HashtableToPSCustomObjectConversion.Tests.ps1" executed="True" result="Success" success="True" time="0.0058" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\HashtableToPSCustomObjectConversion.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Indexer.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Indexer.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\LineEndings.Tests.ps1" executed="True" result="Success" success="True" time="0.0034" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\LineEndings.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\MyInvocation.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\MyInvocation.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\OrderedAttributeForHashTables.Tests.ps1" executed="True" result="Success" success="True" time="0.0034" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\OrderedAttributeForHashTables.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\OutErrorVariable.Tests.ps1" executed="True" result="Success" success="True" time="0.0048" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\OutErrorVariable.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ParameterBinding.Tests.ps1" executed="True" result="Success" success="True" time="0.0055" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ParameterBinding.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\PipelineBehaviour.Tests.ps1" executed="True" result="Success" success="True" time="0.0055" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\PipelineBehaviour.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\PSSerializer.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\PSSerializer.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Requires.Tests.ps1" executed="True" result="Success" success="True" time="0.005" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Requires.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ScriptHelp.Tests.ps1" executed="True" result="Success" success="True" time="0.0278" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\ScriptHelp.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Scripting.Followup.Tests.ps1" executed="True" result="Success" success="True" time="0.0057" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Scripting.Followup.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\SuppressAnsiEscapeSequence.Tests.ps1" executed="True" result="Success" success="True" time="0.0034" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\SuppressAnsiEscapeSequence.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\SwitchParallel.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\SwitchParallel.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Trap.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\Trap.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\TryCatch.Tests.ps1" executed="True" result="Success" success="True" time="0.0051" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Language\Scripting\TryCatch.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\CimCmdlets\CimInstance.Tests.ps1" executed="True" result="Success" success="True" time="0.0037" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\CimCmdlets\CimInstance.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\CimCmdlets\CimSession.Tests.ps1" executed="True" result="Success" success="True" time="0.3721" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\CimCmdlets\CimSession.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="New-CimSession" executed="True" result="Success" success="True" time="0.3675" asserts="0" description="New-CimSession">
            <results>
              <test-case description="A cim session can be created" name="New-CimSession.A cim session can be created" time="0.2289" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="A Cim session can be retrieved" name="New-CimSession.A Cim session can be retrieved" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="A cim session can be removed" name="New-CimSession.A cim session can be removed" time="0.0564" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\CimCmdlets\Get-CimClass.Tests.ps1" executed="True" result="Success" success="True" time="0.0042" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\CimCmdlets\Get-CimClass.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\CompatiblePSEditions.Module.Tests.ps1" executed="True" result="Success" success="True" time="0.0132" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\CompatiblePSEditions.Module.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Enter-PSHostProcess.Tests.ps1" executed="True" result="Success" success="True" time="0.0044" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Enter-PSHostProcess.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Exec.Tests.ps1" executed="True" result="Success" success="True" time="0.004" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Exec.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\ForEach-Object.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\ForEach-Object.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Get-Command.Tests.ps1" executed="True" result="Success" success="True" time="0.0048" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Get-Command.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Get-Error.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Get-Error.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Get-Module.Tests.ps1" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Get-Module.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Get-PSHostProcessInfo.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Get-PSHostProcessInfo.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\History.Tests.ps1" executed="True" result="Success" success="True" time="0.0144" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\History.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Import-Module.Tests.ps1" executed="True" result="Success" success="True" time="0.008" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Import-Module.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\ImportProvider.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\ImportProvider.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Job.Tests.ps1" executed="True" result="Success" success="True" time="0.0053" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Job.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\ModuleConstraint.Tests.ps1" executed="True" result="Success" success="True" time="0.0157" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\ModuleConstraint.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\ModuleManifest.Tests.ps1" executed="True" result="Success" success="True" time="0.0053" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\ModuleManifest.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Out-Default.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Out-Default.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Out-Host.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Out-Host.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Pester.Commands.Cmdlets.GetCommand.Tests.ps1" executed="True" result="Success" success="True" time="0.0037" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Pester.Commands.Cmdlets.GetCommand.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\PSSessionConfiguration.Tests.ps1" executed="True" result="Success" success="True" time="9.6711" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\PSSessionConfiguration.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Validate Register-PSSessionConfiguration" executed="True" result="Success" success="True" time="1.2958" asserts="0" description="Validate Register-PSSessionConfiguration">
            <results>
              <test-case description="Register-PSSessionConfiguration -TransportOption" name="Validate Register-PSSessionConfiguration.Register-PSSessionConfiguration -TransportOption" time="1.1765" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Validate Get-PSSessionConfiguration, Enable-PSSessionConfiguration, Disable-PSSessionConfiguration, Unregister-PSSessionConfiguration cmdlets" executed="True" result="Success" success="True" time="7.801" asserts="0" description="Validate Get-PSSessionConfiguration, Enable-PSSessionConfiguration, Disable-PSSessionConfiguration, Unregister-PSSessionConfiguration cmdlets">
            <results>
              <test-suite type="TestFixture" name="Validate Get-PSSessionConfiguration cmdlet" executed="True" result="Success" success="True" time="0.8294" asserts="0" description="Validate Get-PSSessionConfiguration cmdlet">
                <results>
                  <test-case description="Get-PSSessionConfiguration with no parameter" name="Validate Get-PSSessionConfiguration, Enable-PSSessionConfiguration, Disable-PSSessionConfiguration, Unregister-PSSessionConfiguration cmdlets.Validate Get-PSSessionConfiguration cmdlet.Get-PSSessionConfiguration with no parameter" time="0.5759" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-PSSessionConfiguration with Name parameter" name="Validate Get-PSSessionConfiguration, Enable-PSSessionConfiguration, Disable-PSSessionConfiguration, Unregister-PSSessionConfiguration cmdlets.Validate Get-PSSessionConfiguration cmdlet.Get-PSSessionConfiguration with Name parameter" time="0.0737" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-PSSessionConfiguration -Name with wildcard character" name="Validate Get-PSSessionConfiguration, Enable-PSSessionConfiguration, Disable-PSSessionConfiguration, Unregister-PSSessionConfiguration cmdlets.Validate Get-PSSessionConfiguration cmdlet.Get-PSSessionConfiguration -Name with wildcard character" time="0.1122" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-PSSessionConfiguration -Name with Non-Existent session configuration" name="Validate Get-PSSessionConfiguration, Enable-PSSessionConfiguration, Disable-PSSessionConfiguration, Unregister-PSSessionConfiguration cmdlets.Validate Get-PSSessionConfiguration cmdlet.Get-PSSessionConfiguration -Name with Non-Existent session configuration" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Validate Enable-PSSessionConfiguration and Disable-PSSessionConfiguration" executed="True" result="Success" success="True" time="3.1319" asserts="0" description="Validate Enable-PSSessionConfiguration and Disable-PSSessionConfiguration">
                <results>
                  <test-case description="Validate Disable-Configuration cmdlet" name="Validate Get-PSSessionConfiguration, Enable-PSSessionConfiguration, Disable-PSSessionConfiguration, Unregister-PSSessionConfiguration cmdlets.Validate Enable-PSSessionConfiguration and Disable-PSSessionConfiguration.Validate Disable-Configuration cmdlet" time="1.4769" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Validate Enable-Configuration cmdlet" name="Validate Get-PSSessionConfiguration, Enable-PSSessionConfiguration, Disable-PSSessionConfiguration, Unregister-PSSessionConfiguration cmdlets.Validate Enable-PSSessionConfiguration and Disable-PSSessionConfiguration.Validate Enable-Configuration cmdlet" time="1.6293" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Validate Unregister-PSSessionConfiguration cmdlet" executed="True" result="Success" success="True" time="3.814" asserts="0" description="Validate Unregister-PSSessionConfiguration cmdlet">
                <results>
                  <test-case description="Validate Unregister-PSSessionConfiguration with -name parameter" name="Validate Get-PSSessionConfiguration, Enable-PSSessionConfiguration, Disable-PSSessionConfiguration, Unregister-PSSessionConfiguration cmdlets.Validate Unregister-PSSessionConfiguration cmdlet.Validate Unregister-PSSessionConfiguration with -name parameter" time="1.6313" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Validate Unregister-PSSessionConfiguration with name having wildcard character" name="Validate Get-PSSessionConfiguration, Enable-PSSessionConfiguration, Disable-PSSessionConfiguration, Unregister-PSSessionConfiguration cmdlets.Validate Unregister-PSSessionConfiguration cmdlet.Validate Unregister-PSSessionConfiguration with name having wildcard character" time="1.3238" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Validate Unregister-PSSessionConfiguration for non-existant endpoint" name="Validate Get-PSSessionConfiguration, Enable-PSSessionConfiguration, Disable-PSSessionConfiguration, Unregister-PSSessionConfiguration cmdlets.Validate Unregister-PSSessionConfiguration cmdlet.Validate Unregister-PSSessionConfiguration for non-existant endpoint" time="0.7859" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Basic tests for New-PSSessionConfigurationFile Cmdlet" executed="True" result="Success" success="True" time="0.0249" asserts="0" description="Basic tests for New-PSSessionConfigurationFile Cmdlet">
            <results>
              <test-case description="Validate New-PSSessionConfigurationFile can successfully create a valid PSSessionConfigurationFile" name="Basic tests for New-PSSessionConfigurationFile Cmdlet.Validate New-PSSessionConfigurationFile can successfully create a valid PSSessionConfigurationFile" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test suite for Test-PSSessionConfigurationFile Cmdlet" executed="True" result="Success" success="True" time="0.4486" asserts="0" description="Test suite for Test-PSSessionConfigurationFile Cmdlet">
            <results>
              <test-case description="Validate FullyQualifiedErrorId from Test-PSSessionConfigurationFile when invalid path is provided as input" name="Test suite for Test-PSSessionConfigurationFile Cmdlet.Validate FullyQualifiedErrorId from Test-PSSessionConfigurationFile when invalid path is provided as input" time="0.3442" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Validate FullyQualifiedErrorId from Test-PSSessionConfigurationFile when an invalid pssc file is provided as input and -Verbose parameter is specified" name="Test suite for Test-PSSessionConfigurationFile Cmdlet.Validate FullyQualifiedErrorId from Test-PSSessionConfigurationFile when an invalid pssc file is provided as input and -Verbose parameter is specified" time="0.0548" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Test case verifies that the generated config file passes validation" name="Test suite for Test-PSSessionConfigurationFile Cmdlet.Test case verifies that the generated config file passes validation" time="0.025" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\RemoteGetModule.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\RemoteGetModule.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\RemoteImportModule.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\RemoteImportModule.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\RemotingCmdlets.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\RemotingCmdlets.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Remove-Module.Tests.ps1" executed="True" result="Success" success="True" time="0.0066" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Remove-Module.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Set-PSDebug.Tests.ps1" executed="True" result="Success" success="True" time="0.0031" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Set-PSDebug.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Where-Object.Tests.ps1" executed="True" result="Success" success="True" time="0.0324" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Core\Where-Object.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Diagnostics\Export-Counter.Tests.ps1" executed="True" result="Success" success="True" time="0.0041" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Diagnostics\Export-Counter.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Diagnostics\Get-Counter.Tests.ps1" executed="True" result="Success" success="True" time="0.3025" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Diagnostics\Get-Counter.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Diagnostics\Get-WinEvent.Tests.ps1" executed="True" result="Success" success="True" time="0.0042" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Diagnostics\Get-WinEvent.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Diagnostics\Import-Counter.Tests.ps1" executed="True" result="Success" success="True" time="0.0243" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Diagnostics\Import-Counter.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Diagnostics\New-WinEvent.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Diagnostics\New-WinEvent.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.Powershell.Host\Start-Transcript.Tests.ps1" executed="True" result="Success" success="True" time="0.0048" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.Powershell.Host\Start-Transcript.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.LocalAccounts\Pester.Command.Cmdlets.LocalAccounts.LocalGroup.Tests.ps1" executed="True" result="Success" success="True" time="0.0059" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.LocalAccounts\Pester.Command.Cmdlets.LocalAccounts.LocalGroup.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.LocalAccounts\Pester.Command.Cmdlets.LocalAccounts.LocalGroupMember.Tests.ps1" executed="True" result="Success" success="True" time="0.0048" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.LocalAccounts\Pester.Command.Cmdlets.LocalAccounts.LocalGroupMember.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.LocalAccounts\Pester.Command.Cmdlets.LocalAccounts.LocalUser.Tests.ps1" executed="True" result="Success" success="True" time="0.0078" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.LocalAccounts\Pester.Command.Cmdlets.LocalAccounts.LocalUser.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Add-Content.Tests.ps1" executed="True" result="Success" success="True" time="0.0037" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Add-Content.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Alias.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Alias.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Clear-Content.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Clear-Content.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Clear-EventLog.Tests.ps1" executed="True" result="Inconclusive" success="True" time="0.0504" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Clear-EventLog.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Clear-EventLog cmdlet tests" executed="True" result="Inconclusive" success="True" time="0.0461" asserts="0" description="Clear-EventLog cmdlet tests">
            <results>
              <test-case description="should be able to Clear-EventLog" name="Clear-EventLog cmdlet tests.should be able to Clear-EventLog" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
              <test-case description="should throw 'System.InvalidOperationException' when asked to clear a log that does not exist" name="Clear-EventLog cmdlet tests.should throw 'System.InvalidOperationException' when asked to clear a log that does not exist" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
              <test-case description="should throw 'Microsoft.PowerShell.Commands.ClearEventLogCommand' ErrorId when asked to clear a log that does not exist" name="Clear-EventLog cmdlet tests.should throw 'Microsoft.PowerShell.Commands.ClearEventLogCommand' ErrorId when asked to clear a log that does not exist" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Clear-Item.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Clear-Item.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Clipboard.Tests.ps1" executed="True" result="Success" success="True" time="0.0045" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Clipboard.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\ControlService.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\ControlService.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Convert-Path.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Convert-Path.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Copy-Item.Tests.ps1" executed="True" result="Success" success="True" time="0.0066" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Copy-Item.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\FileSystem.Tests.ps1" executed="True" result="Ignored" success="True" time="1.3493" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\FileSystem.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Hard link and symbolic link tests" executed="True" result="Ignored" success="True" time="0.4457" asserts="0" description="Hard link and symbolic link tests">
            <results>
              <test-suite type="TestFixture" name="New-Item and hard/symbolic links" executed="True" result="Ignored" success="True" time="0.2048" asserts="0" description="New-Item and hard/symbolic links">
                <results>
                  <test-case description="New-Item can create a hard link to a file" name="Hard link and symbolic link tests.New-Item and hard/symbolic links.New-Item can create a hard link to a file" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="New-Item can create symbolic link to file" name="Hard link and symbolic link tests.New-Item and hard/symbolic links.New-Item can create symbolic link to file" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="New-Item can create a symbolic link to nothing" name="Hard link and symbolic link tests.New-Item and hard/symbolic links.New-Item can create a symbolic link to nothing" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="New-Item emits an error when path to symbolic link already exists." name="Hard link and symbolic link tests.New-Item and hard/symbolic links.New-Item emits an error when path to symbolic link already exists." time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="New-Item can create a symbolic link to a directory" name="Hard link and symbolic link tests.New-Item and hard/symbolic links.New-Item can create a symbolic link to a directory" time="0" asserts="0" success="True" result="Ignored" executed="False" />
                  <test-case description="New-Item can create a directory symbolic link to a directory" name="Hard link and symbolic link tests.New-Item and hard/symbolic links.New-Item can create a directory symbolic link to a directory" time="0.0141" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="New-Item can create a directory symbolic link to a directory using a relative path" name="Hard link and symbolic link tests.New-Item and hard/symbolic links.New-Item can create a directory symbolic link to a directory using a relative path" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="New-Item can create a directory symbolic link to a directory using a relative path with .\" name="Hard link and symbolic link tests.New-Item and hard/symbolic links.New-Item can create a directory symbolic link to a directory using a relative path with .\" time="0.0162" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="New-Item can create a directory junction to a directory" name="Hard link and symbolic link tests.New-Item and hard/symbolic links.New-Item can create a directory junction to a directory" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="New-Item fails creating junction with relative path" name="Hard link and symbolic link tests.New-Item and hard/symbolic links.New-Item fails creating junction with relative path" time="0.01" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="New-Item can create hardlink with relative path" name="Hard link and symbolic link tests.New-Item and hard/symbolic links.New-Item can create hardlink with relative path" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="New-Item will fail to forcibly create hardlink to itself" name="Hard link and symbolic link tests.New-Item and hard/symbolic links.New-Item will fail to forcibly create hardlink to itself" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="New-Item -Force can overwrite a junction" name="Hard link and symbolic link tests.New-Item and hard/symbolic links.New-Item -Force can overwrite a junction" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ChildItem and symbolic links" executed="True" result="Inconclusive" success="True" time="0.0987" asserts="0" description="Get-ChildItem and symbolic links">
                <results>
                  <test-case description="Get-ChildItem gets content of linked-to directory" name="Hard link and symbolic link tests.Get-ChildItem and symbolic links.Get-ChildItem gets content of linked-to directory" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-ChildItem -Name gets content of linked-to directory" name="Hard link and symbolic link tests.Get-ChildItem and symbolic links.Get-ChildItem -Name gets content of linked-to directory" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-ChildItem does not recurse into symbolic links not explicitly given on the command line" name="Hard link and symbolic link tests.Get-ChildItem and symbolic links.Get-ChildItem does not recurse into symbolic links not explicitly given on the command line" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-ChildItem -Name does not recurse into symbolic links not explicitly given on the command line" name="Hard link and symbolic link tests.Get-ChildItem and symbolic links.Get-ChildItem -Name does not recurse into symbolic links not explicitly given on the command line" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
                  <test-case description="Get-ChildItem will recurse into symlinks given -FollowSymlink, avoiding link loops" name="Hard link and symbolic link tests.Get-ChildItem and symbolic links.Get-ChildItem will recurse into symlinks given -FollowSymlink, avoiding link loops" time="0.0161" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-ChildItem -Name will recurse into symlinks given -FollowSymlink, avoiding link loops" name="Hard link and symbolic link tests.Get-ChildItem and symbolic links.Get-ChildItem -Name will recurse into symlinks given -FollowSymlink, avoiding link loops" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Remove-Item and hard/symbolic links" executed="True" result="Ignored" success="True" time="0.0692" asserts="0" description="Remove-Item and hard/symbolic links">
                <results>
                  <test-case description="Remove-Item can remove a symbolic link to a directory on Unix" name="Hard link and symbolic link tests.Remove-Item and hard/symbolic links.Remove-Item can remove a symbolic link to a directory on Unix" time="0" asserts="0" success="True" result="Ignored" executed="False" />
                  <test-case description="Remove-Item ignores -Recurse switch when deleting symlink to directory" name="Hard link and symbolic link tests.Remove-Item and hard/symbolic links.Remove-Item ignores -Recurse switch when deleting symlink to directory" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-suite type="ParameterizedTest" name="Hard link and symbolic link tests.Remove-Item and hard/symbolic links.&lt;Name&gt;" executed="True" result="Success" success="True" time="0.0211" asserts="0" description="&lt;Name&gt;">
                    <results>
                      <test-case description="Remove-Item can remove a hard link to a file" name="Hard link and symbolic link tests.Remove-Item and hard/symbolic links.Remove-Item can remove a hard link to a file" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Remove-Item can remove a symbolic link to a file" name="Hard link and symbolic link tests.Remove-Item and hard/symbolic links.Remove-Item can remove a symbolic link to a file" time="0.002" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Remove-Item can remove a symbolic link to a directory on Windows" name="Hard link and symbolic link tests.Remove-Item and hard/symbolic links.Remove-Item can remove a symbolic link to a directory on Windows" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Remove-Item can remove a directory symbolic link to a directory on Windows" name="Hard link and symbolic link tests.Remove-Item and hard/symbolic links.Remove-Item can remove a directory symbolic link to a directory on Windows" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Remove-Item can remove a junction to a directory" name="Hard link and symbolic link tests.Remove-Item and hard/symbolic links.Remove-Item can remove a junction to a directory" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Show immediate target" executed="True" result="Success" success="True" time="0.0463" asserts="0" description="Show immediate target">
                <results>
                  <test-case description="Property 'Target' should show the immediate target" name="Hard link and symbolic link tests.Show immediate target.Property 'Target' should show the immediate target" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Get-Content should be able to resolve the final target" name="Hard link and symbolic link tests.Show immediate target.Get-Content should be able to resolve the final target" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Copy-Item can avoid copying an item onto itself" executed="True" result="Success" success="True" time="0.1472" asserts="0" description="Copy-Item can avoid copying an item onto itself">
            <results>
              <test-suite type="TestFixture" name="Copy-Item using different case (on case-sensitive file systems)" executed="True" result="Success" success="True" time="0.0312" asserts="0" description="Copy-Item using different case (on case-sensitive file systems)">
                <results>
                  <test-case description="Copy-Item can copy to file name differing only by case" name="Copy-Item can avoid copying an item onto itself.Copy-Item using different case (on case-sensitive file systems).Copy-Item can copy to file name differing only by case" time="0.0098" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Copy-Item avoids copying an item onto itself" executed="True" result="Success" success="True" time="0.0814" asserts="0" description="Copy-Item avoids copying an item onto itself">
                <results>
                  <test-suite type="ParameterizedTest" name="Copy-Item can avoid copying an item onto itself.Copy-Item avoids copying an item onto itself.&lt;Name&gt;" executed="True" result="Success" success="True" time="0.0405" asserts="0" description="&lt;Name&gt;">
                    <results>
                      <test-case description="Copy to same path" name="Copy-Item can avoid copying an item onto itself.Copy-Item avoids copying an item onto itself.Copy to same path" time="0.0125" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Copy hard link" name="Copy-Item can avoid copying an item onto itself.Copy-Item avoids copying an item onto itself.Copy hard link" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Copy hard link, reversed" name="Copy-Item can avoid copying an item onto itself.Copy-Item avoids copying an item onto itself.Copy hard link, reversed" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Copy symbolic link to target" name="Copy-Item can avoid copying an item onto itself.Copy-Item avoids copying an item onto itself.Copy symbolic link to target" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Copy symbolic link to symbolic link with same target" name="Copy-Item can avoid copying an item onto itself.Copy-Item avoids copying an item onto itself.Copy symbolic link to symbolic link with same target" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Copy through chain of symbolic links" name="Copy-Item can avoid copying an item onto itself.Copy-Item avoids copying an item onto itself.Copy through chain of symbolic links" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Copy junction to target" name="Copy-Item can avoid copying an item onto itself.Copy-Item avoids copying an item onto itself.Copy junction to target" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Copy directory symbolic link to target" name="Copy-Item can avoid copying an item onto itself.Copy-Item avoids copying an item onto itself.Copy directory symbolic link to target" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Remove-Item UnAuthorized Access" executed="True" result="Success" success="True" time="0.5015" asserts="0" description="Remove-Item UnAuthorized Access">
            <results>
              <test-case description="Access-denied test for removing a folder" name="Remove-Item UnAuthorized Access.Access-denied test for removing a folder" time="0.4807" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Windows admin tests" executed="True" result="Success" success="True" time="0.1716" asserts="0" description="Windows admin tests">
            <results>
              <test-case description="Verify Move-Item for directory across drives on Windows" name="Windows admin tests.Verify Move-Item for directory across drives on Windows" time="0.1443" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="OneDrive filesystem manipulation" executed="True" result="Success" success="True" time="0.0541" asserts="0" description="OneDrive filesystem manipulation">
            <results>
              <test-case description="Get-ChildItem will recurse into emulated OneDrive directory" name="OneDrive filesystem manipulation.Get-ChildItem will recurse into emulated OneDrive directory" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Remove-Item will recurse into emulated OneDrive directory" name="OneDrive filesystem manipulation.Remove-Item will recurse into emulated OneDrive directory" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\FileSystemProviderExtended.Tests.ps1" executed="True" result="Success" success="True" time="0.0069" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\FileSystemProviderExtended.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\FunctionProvider.Tests.ps1" executed="True" result="Success" success="True" time="0.0037" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\FunctionProvider.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-ChildItem.Tests.ps1" executed="True" result="Success" success="True" time="0.094" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-ChildItem.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="FileSystem Provider Formatting" executed="True" result="Success" success="True" time="0.0873" asserts="0" description="FileSystem Provider Formatting">
            <results>
              <test-suite type="ParameterizedTest" name="FileSystem Provider Formatting.Validate Mode property - &lt;itemName&gt;" executed="True" result="Success" success="True" time="0.03" asserts="0" description="Validate Mode property - &lt;itemName&gt;">
                <results>
                  <test-case description="Validate Mode property - Directory" name="FileSystem Provider Formatting.Validate Mode property - Directory" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Validate Mode property - SymbolicLink-Directory" name="FileSystem Provider Formatting.Validate Mode property - SymbolicLink-Directory" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Validate Mode property - Junction-Directory" name="FileSystem Provider Formatting.Validate Mode property - Junction-Directory" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Validate Mode property - ArchiveFile" name="FileSystem Provider Formatting.Validate Mode property - ArchiveFile" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Validate Mode property - SymbolicLink-File" name="FileSystem Provider Formatting.Validate Mode property - SymbolicLink-File" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Validate Mode property - HardLink" name="FileSystem Provider Formatting.Validate Mode property - HardLink" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-ComputerInfo.Tests.ps1" executed="True" result="Success" success="True" time="4.6568" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-ComputerInfo.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Tests for Get-ComputerInfo: Ensure Type returned" executed="True" result="Success" success="True" time="4.646" asserts="0" description="Tests for Get-ComputerInfo: Ensure Type returned">
            <results>
              <test-case description="Verify type returned by Get-ComputerInfo" name="Tests for Get-ComputerInfo: Ensure Type returned.Verify type returned by Get-ComputerInfo" time="2.9352" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Verify progress records in Get-ComputerInfo" name="Tests for Get-ComputerInfo: Ensure Type returned.Verify progress records in Get-ComputerInfo" time="1.6905" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-Content.Tests.ps1" executed="True" result="Success" success="True" time="0.0162" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-Content.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-EventLog.Tests.ps1" executed="True" result="Inconclusive" success="True" time="0.033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-EventLog.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-EventLog cmdlet tests" executed="True" result="Inconclusive" success="True" time="0.0282" asserts="0" description="Get-EventLog cmdlet tests">
            <results>
              <test-case description="should return an array of eventlogs objects when called with -AsString parameter" name="Get-EventLog cmdlet tests.should return an array of eventlogs objects when called with -AsString parameter" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
              <test-case description="should return a list of eventlog objects when called with -List parameter" name="Get-EventLog cmdlet tests.should return a list of eventlog objects when called with -List parameter" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
              <test-case description="should be able to Get-EventLog -LogName Application -Newest 100" name="Get-EventLog cmdlet tests.should be able to Get-EventLog -LogName Application -Newest 100" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
              <test-case description="should throw 'AmbiguousParameterSetException' when called with both -LogName and -List parameters" name="Get-EventLog cmdlet tests.should throw 'AmbiguousParameterSetException' when called with both -LogName and -List parameters" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
              <test-case description="should be able to Get-EventLog -LogName * with multiple matches" name="Get-EventLog cmdlet tests.should be able to Get-EventLog -LogName * with multiple matches" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
              <test-case description="should throw 'InvalidOperationException' when asked to get a log that does not exist" name="Get-EventLog cmdlet tests.should throw 'InvalidOperationException' when asked to get a log that does not exist" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-HotFix.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-HotFix.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-Item.Tests.ps1" executed="True" result="Success" success="True" time="0.0271" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-Item.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Formatting for FileInfo requiring admin" executed="True" result="Success" success="True" time="0.0211" asserts="0" description="Formatting for FileInfo requiring admin">
            <results>
              <test-case description="Symlink should have correct color" name="Formatting for FileInfo requiring admin.Symlink should have correct color" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-ItemProperty.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-ItemProperty.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-Location.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-Location.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-Process.Tests.ps1" executed="True" result="Ignored" success="True" time="0.2616" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-Process.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-Process for admin" executed="True" result="Ignored" success="True" time="0.2554" asserts="0" description="Get-Process for admin">
            <results>
              <test-case description="Should support -Module" name="Get-Process for admin.Should support -Module" time="0.2063" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should support -FileVersionInfo" name="Get-Process for admin.Should support -FileVersionInfo" time="0.012" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Run with parameter -FileVersionInfo should not stop responding on non Windows platform also when process' main module is null." name="Get-Process for admin.Run with parameter -FileVersionInfo should not stop responding on non Windows platform also when process' main module is null." time="0" asserts="0" success="True" result="Ignored" executed="False" />
              <test-case description="Run with parameter -FileVersionInfo for idle process should throw on Windows." name="Get-Process for admin.Run with parameter -FileVersionInfo for idle process should throw on Windows." time="0.0066" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-PSDrive.Tests.ps1" executed="True" result="Success" success="True" time="0.2652" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-PSDrive.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-PSDrive for network path" executed="True" result="Success" success="True" time="0.259" asserts="0" description="Get-PSDrive for network path">
            <results>
              <test-case description="Check P/Invoke GetDosDevice/QueryDosDevice" name="Get-PSDrive for network path.Check P/Invoke GetDosDevice/QueryDosDevice" time="0.0937" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Get-PSDrive for network path.Check P/Invoke for WNetGetConnection with small buffer: &lt;SmallBuffer&gt;" executed="True" result="Success" success="True" time="0.1279" asserts="0" description="Check P/Invoke for WNetGetConnection with small buffer: &lt;SmallBuffer&gt;">
                <results>
                  <test-case description="Check P/Invoke for WNetGetConnection with small buffer: $false" name="Get-PSDrive for network path.Check P/Invoke for WNetGetConnection with small buffer: $false" time="0.0628" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Check P/Invoke for WNetGetConnection with small buffer: $true" name="Get-PSDrive for network path.Check P/Invoke for WNetGetConnection with small buffer: $true" time="0.0651" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-PSProvider.Tests.ps1" executed="True" result="Success" success="True" time="0.004" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-PSProvider.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-Service.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Get-Service.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Hierarchical-Path.Tests.ps1" executed="True" result="Success" success="True" time="0.0031" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Hierarchical-Path.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\ItemProperty.Tests.ps1" executed="True" result="Success" success="True" time="0.003" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\ItemProperty.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Join-Path.Tests.ps1" executed="True" result="Success" success="True" time="0.0031" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Join-Path.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Move-Item.Tests.ps1" executed="True" result="Success" success="True" time="0.0041" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Move-Item.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\New-EventLog.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0347" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\New-EventLog.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="New-EventLog cmdlet tests" executed="True" result="Ignored" success="True" time="0.0302" asserts="0" description="New-EventLog cmdlet tests">
            <results>
              <test-case description="should be able to create a New-EventLog with a -Source parameter" name="New-EventLog cmdlet tests.should be able to create a New-EventLog with a -Source parameter" time="0" asserts="0" success="True" result="Ignored" executed="False" />
              <test-case description="should be able to create a New-EventLog with a -ComputerName parameter" name="New-EventLog cmdlet tests.should be able to create a New-EventLog with a -ComputerName parameter" time="0" asserts="0" success="True" result="Ignored" executed="False" />
              <test-case description="should be able to create a New-EventLog with a -CategoryResourceFile parameter" name="New-EventLog cmdlet tests.should be able to create a New-EventLog with a -CategoryResourceFile parameter" time="0" asserts="0" success="True" result="Ignored" executed="False" />
              <test-case description="should be able to create a New-EventLog with a -MessageResourceFile parameter" name="New-EventLog cmdlet tests.should be able to create a New-EventLog with a -MessageResourceFile parameter" time="0" asserts="0" success="True" result="Ignored" executed="False" />
              <test-case description="should be able to create a New-EventLog with a -ParameterResourceFile parameter" name="New-EventLog cmdlet tests.should be able to create a New-EventLog with a -ParameterResourceFile parameter" time="0" asserts="0" success="True" result="Ignored" executed="False" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\New-Item.Tests.ps1" executed="True" result="Success" success="True" time="0.1188" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\New-Item.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="New-Item with links" executed="True" result="Success" success="True" time="0.0742" asserts="0" description="New-Item with links">
            <results>
              <test-case description="Should create a symbolic link of a file without error" name="New-Item with links.Should create a symbolic link of a file without error" time="0.0098" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should create a symbolic link to a non-existing file without error" name="New-Item with links.Should create a symbolic link to a non-existing file without error" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should create a symbolic link to directory without error" name="New-Item with links.Should create a symbolic link to directory without error" time="0.0107" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="New-Item -ItemType SymbolicLink should understand directory path ending with slash" name="New-Item with links.New-Item -ItemType SymbolicLink should understand directory path ending with slash" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="New-Item -ItemType SymbolicLink should be able to create a relative link" name="New-Item with links.New-Item -ItemType SymbolicLink should be able to create a relative link" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="New-Item: symlink with absolute/relative path test" executed="True" result="Success" success="True" time="0.035" asserts="0" description="New-Item: symlink with absolute/relative path test">
            <results>
              <test-case description="Symlink with absolute path to existing directory behaves like a directory" name="New-Item: symlink with absolute/relative path test.Symlink with absolute path to existing directory behaves like a directory" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Symlink with relative path to existing directory behaves like a directory" name="New-Item: symlink with absolute/relative path test.Symlink with relative path to existing directory behaves like a directory" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Symlink with absolute path to existing file behaves like a file" name="New-Item: symlink with absolute/relative path test.Symlink with absolute path to existing file behaves like a file" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Symlink with relative path to existing file behaves like a file" name="New-Item: symlink with absolute/relative path test.Symlink with relative path to existing file behaves like a file" time="0.0015" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\New-PSDrive.Tests.ps1" executed="True" result="Success" success="True" time="0.5378" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\New-PSDrive.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Tests for New-PSDrive cmdlet." executed="True" result="Success" success="True" time="0.5331" asserts="0" description="Tests for New-PSDrive cmdlet.">
            <results>
              <test-suite type="TestFixture" name="Validate New-PSDrive Cmdlet with -Persist switch." executed="True" result="Success" success="True" time="0.5081" asserts="0" description="Validate New-PSDrive Cmdlet with -Persist switch.">
                <results>
                  <test-case description="Should not throw exception for persistent PSDrive creation." name="Tests for New-PSDrive cmdlet..Validate New-PSDrive Cmdlet with -Persist switch..Should not throw exception for persistent PSDrive creation." time="0.0301" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Network drive initialization on pwsh startup DisplayRoot should have value of share" name="Tests for New-PSDrive cmdlet..Validate New-PSDrive Cmdlet with -Persist switch..Network drive initialization on pwsh startup DisplayRoot should have value of share" time="0.4269" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should throw exception if root is not a remote share." name="Tests for New-PSDrive cmdlet..Validate New-PSDrive Cmdlet with -Persist switch..Should throw exception if root is not a remote share." time="0.0119" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should throw exception if PSDrive is not a drive letter supported by operating system." name="Tests for New-PSDrive cmdlet..Validate New-PSDrive Cmdlet with -Persist switch..Should throw exception if PSDrive is not a drive letter supported by operating system." time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Pester.Commands.Cmdlets.NoNewlineParameter.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Pester.Commands.Cmdlets.NoNewlineParameter.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Pop-Location.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Pop-Location.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\PSDrive.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\PSDrive.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Push-Location.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Push-Location.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Registry.Tests.ps1" executed="True" result="Success" success="True" time="0.8964" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Registry.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Basic Registry Provider Tests" executed="True" result="Success" success="True" time="0.8646" asserts="0" description="Basic Registry Provider Tests">
            <results>
              <test-suite type="TestFixture" name="Validate basic registry provider Cmdlets" executed="True" result="Success" success="True" time="0.3903" asserts="0" description="Validate basic registry provider Cmdlets">
                <results>
                  <test-case description="Verify Test-Path" name="Basic Registry Provider Tests.Validate basic registry provider Cmdlets.Verify Test-Path" time="0.0297" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Get-Item" name="Basic Registry Provider Tests.Validate basic registry provider Cmdlets.Verify Get-Item" time="0.0289" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Get-Item on inaccessible path" name="Basic Registry Provider Tests.Validate basic registry provider Cmdlets.Verify Get-Item on inaccessible path" time="0.0366" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Get-ChildItem" name="Basic Registry Provider Tests.Validate basic registry provider Cmdlets.Verify Get-ChildItem" time="0.0334" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Get-ChildItem can get subkey names" name="Basic Registry Provider Tests.Validate basic registry provider Cmdlets.Verify Get-ChildItem can get subkey names" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify New-Item" name="Basic Registry Provider Tests.Validate basic registry provider Cmdlets.Verify New-Item" time="0.0433" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Copy-Item" name="Basic Registry Provider Tests.Validate basic registry provider Cmdlets.Verify Copy-Item" time="0.0409" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Move-Item" name="Basic Registry Provider Tests.Validate basic registry provider Cmdlets.Verify Move-Item" time="0.0434" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Rename-Item" name="Basic Registry Provider Tests.Validate basic registry provider Cmdlets.Verify Rename-Item" time="0.0582" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Valdiate basic registry property Cmdlets" executed="True" result="Success" success="True" time="0.4473" asserts="0" description="Valdiate basic registry property Cmdlets">
                <results>
                  <test-case description="Verify New-ItemProperty" name="Basic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify New-ItemProperty" time="0.0326" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Set-ItemProperty" name="Basic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify Set-ItemProperty" time="0.0315" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Set-Item" name="Basic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify Set-Item" time="0.0371" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Set-Item with -WhatIf" name="Basic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify Set-Item with -WhatIf" time="0.0318" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Get-ItemPropertyValue" name="Basic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify Get-ItemPropertyValue" time="0.0294" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Copy-ItemProperty" name="Basic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify Copy-ItemProperty" time="0.0389" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Move-ItemProperty" name="Basic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify Move-ItemProperty" time="0.0334" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Rename-ItemProperty" name="Basic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify Rename-ItemProperty" time="0.0329" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Clear-ItemProperty" name="Basic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify Clear-ItemProperty" time="0.0299" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Clear-Item" name="Basic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify Clear-Item" time="0.0326" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Clear-Item with -WhatIf" name="Basic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify Clear-Item with -WhatIf" time="0.0325" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verify Remove-ItemProperty" name="Basic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify Remove-ItemProperty" time="0.0301" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Remove-EventLog.Tests.ps1" executed="True" result="Inconclusive" success="True" time="0.0249" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Remove-EventLog.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="New-EventLog cmdlet tests" executed="True" result="Inconclusive" success="True" time="0.0199" asserts="0" description="New-EventLog cmdlet tests">
            <results>
              <test-case description="should be able to Remove-EventLog -LogName &lt;string&gt; -ComputerName &lt;string&gt;" name="New-EventLog cmdlet tests.should be able to Remove-EventLog -LogName &lt;string&gt; -ComputerName &lt;string&gt;" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
              <test-case description="should be able to Remove-EventLog -Source &lt;string&gt; -ComputerName &lt;string&gt;" name="New-EventLog cmdlet tests.should be able to Remove-EventLog -Source &lt;string&gt; -ComputerName &lt;string&gt;" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Remove-Item.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Remove-Item.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Rename-Computer.Tests.ps1" executed="True" result="Success" success="True" time="0.0084" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Rename-Computer.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Rename-Item.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Rename-Item.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Resolve-Path.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Resolve-Path.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Restart-Computer.Tests.ps1" executed="True" result="Success" success="True" time="0.0049" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Restart-Computer.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Set-Content.Tests.ps1" executed="True" result="Inconclusive" success="True" time="0.0316" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Set-Content.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Set-Content should work for PSDrive with UNC path as root" executed="True" result="Inconclusive" success="True" time="0.0266" asserts="0" description="Set-Content should work for PSDrive with UNC path as root">
            <results>
              <test-case description="should create a file in a psdrive with UNC path as root" name="Set-Content should work for PSDrive with UNC path as root.should create a file in a psdrive with UNC path as root" time="0" asserts="0" success="True" result="Inconclusive" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Set-Item.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Set-Item.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Set-Location.Tests.ps1" executed="True" result="Success" success="True" time="0.0041" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Set-Location.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Set-Service.Tests.ps1" executed="True" result="Success" success="True" time="0.0076" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Set-Service.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Split-Path.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Split-Path.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Start-Process.Tests.ps1" executed="True" result="Success" success="True" time="0.0048" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Start-Process.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Stop-Computer.Tests.ps1" executed="True" result="Success" success="True" time="0.0046" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Stop-Computer.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Test-Connection.Tests.ps1" executed="True" result="Success" success="True" time="4.5238" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Test-Connection.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Connection" executed="True" result="Success" success="True" time="4.5142" asserts="0" description="Connection">
            <results>
              <test-case description="Test connection to local host on working port" name="Connection.Test connection to local host on working port" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Test connection to unreachable host port 80" name="Connection.Test connection to unreachable host port 80" time="0.9888" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Test detailed connection to local host on working port" name="Connection.Test detailed connection to local host on working port" time="0.0183" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Test detailed connection to local host on working port with modified count" name="Connection.Test detailed connection to local host on working port with modified count" time="1.0179" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Test detailed connection to unreachable host port 80" name="Connection.Test detailed connection to unreachable host port 80" time="0.9939" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Test-Path.Tests.ps1" executed="True" result="Success" success="True" time="0.0043" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Test-Path.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\TimeZone.Tests.ps1" executed="True" result="Success" success="True" time="0.2712" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\TimeZone.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Set-Timezone test case: call by single Id" executed="True" result="Success" success="True" time="0.2652" asserts="0" description="Set-Timezone test case: call by single Id">
            <results>
              <test-case description="Call Set-TimeZone by Id" name="Set-Timezone test case: call by single Id.Call Set-TimeZone by Id" time="0.2203" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Unimplemented-Cmdlet.Tests.ps1" executed="True" result="Success" success="True" time="0.0274" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Unimplemented-Cmdlet.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\UnixStat.Tests.ps1" executed="True" result="Success" success="True" time="0.004" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\UnixStat.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Variable.Tests.ps1" executed="True" result="Success" success="True" time="0.0037" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Variable.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Wait-Process.Tests.ps1" executed="True" result="Success" success="True" time="0.0031" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Management\Wait-Process.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.PSResourceGet\Microsoft.PowerShell.PSResourceGet.Tests.ps1" executed="True" result="Success" success="True" time="0.0094" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.PSResourceGet\Microsoft.PowerShell.PSResourceGet.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\AclCmdlets.Tests.ps1" executed="True" result="Success" success="True" time="0.0034" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\AclCmdlets.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\AmsiInterface.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\AmsiInterface.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\CertificateProvider.Tests.ps1" executed="True" result="Success" success="True" time="0.0069" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\CertificateProvider.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\CmsMessage.Tests.ps1" executed="True" result="Success" success="True" time="0.0065" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\CmsMessage.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\CmsMessage2.Tests.ps1" executed="True" result="Success" success="True" time="0.0082" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\CmsMessage2.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\ConstrainedLanguageDebugger.Tests.ps1" executed="True" result="Success" success="True" time="0.5101" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\ConstrainedLanguageDebugger.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Local script debugger is disabled in system lock down mode" executed="True" result="Success" success="True" time="0.4437" asserts="0" description="Local script debugger is disabled in system lock down mode">
            <results>
              <test-case description="Verifies that Wait-Debugger is disabled on locked down system" name="Local script debugger is disabled in system lock down mode.Verifies that Wait-Debugger is disabled on locked down system" time="0.0386" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Local script debugger is disabled in system lock down mode.&lt;testName&gt;" executed="True" result="Success" success="True" time="0.3116" asserts="0" description="&lt;testName&gt;">
                <results>
                  <test-case description="Verifies that Set-PSBreakpoint Line is disabled on locked down system" name="Local script debugger is disabled in system lock down mode.Verifies that Set-PSBreakpoint Line is disabled on locked down system" time="0.0792" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verifies that Set-PSBreakpoint Statement is disabled on locked down system" name="Local script debugger is disabled in system lock down mode.Verifies that Set-PSBreakpoint Statement is disabled on locked down system" time="0.0849" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verifies that Set-PSBreakpoint Command is disabled on locked down system" name="Local script debugger is disabled in system lock down mode.Verifies that Set-PSBreakpoint Command is disabled on locked down system" time="0.0578" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Verifies that Set-PSBreakpoint Variable is disabled on locked down system" name="Local script debugger is disabled in system lock down mode.Verifies that Set-PSBreakpoint Variable is disabled on locked down system" time="0.0897" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\ConstrainedLanguageModules.Tests.ps1" executed="True" result="Success" success="True" time="0.0288" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\ConstrainedLanguageModules.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\ConstrainedLanguageRestriction.Tests.ps1" executed="True" result="Success" success="True" time="0.0159" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\ConstrainedLanguageRestriction.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\ConstrainedLanguageValidation.Tests.ps1" executed="True" result="Success" success="True" time="0.0632" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\ConstrainedLanguageValidation.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Importing PowerShell script files are not allowed in ConstrainedLanguage" executed="True" result="Success" success="True" time="0.0563" asserts="0" description="Importing PowerShell script files are not allowed in ConstrainedLanguage">
            <results>
              <test-case description="Verifies that ps1 script file cannot be imported in ConstrainedLanguage mode" name="Importing PowerShell script files are not allowed in ConstrainedLanguage.Verifies that ps1 script file cannot be imported in ConstrainedLanguage mode" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Verifies that ps1 script file can be imported in FullLangauge mode" name="Importing PowerShell script files are not allowed in ConstrainedLanguage.Verifies that ps1 script file can be imported in FullLangauge mode" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\ExecutionPolicy.Tests.ps1" executed="True" result="Success" success="True" time="0.0459" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\ExecutionPolicy.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Validate Set-ExecutionPolicy -Scope (Admin)" executed="True" result="Success" success="True" time="0.0352" asserts="0" description="Validate Set-ExecutionPolicy -Scope (Admin)">
            <results>
              <test-case description="-Scope LocalMachine is Settable, but overridden" name="Validate Set-ExecutionPolicy -Scope (Admin).-Scope LocalMachine is Settable, but overridden" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="-Scope LocalMachine is Settable" name="Validate Set-ExecutionPolicy -Scope (Admin).-Scope LocalMachine is Settable" time="0.0018" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\FileCatalog.Tests.ps1" executed="True" result="Success" success="True" time="0.005" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\FileCatalog.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\GetCredential.Tests.ps1" executed="True" result="Success" success="True" time="0.004" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\GetCredential.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\SecureString.Tests.ps1" executed="True" result="Success" success="True" time="0.0037" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Security\SecureString.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Add-Member.Tests.ps1" executed="True" result="Success" success="True" time="0.0045" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Add-Member.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Add-Type.Tests.ps1" executed="True" result="Success" success="True" time="0.0043" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Add-Type.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\alias.tests.ps1" executed="True" result="Success" success="True" time="0.0071" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\alias.tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Clear-Variable.Tests.ps1" executed="True" result="Success" success="True" time="0.0044" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Clear-Variable.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\clixml.tests.ps1" executed="True" result="Success" success="True" time="0.0076" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\clixml.tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\command.tests.ps1" executed="True" result="Success" success="True" time="0.0037" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\command.tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Compare-Object.Tests.ps1" executed="True" result="Success" success="True" time="0.0107" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Compare-Object.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertFrom-Csv.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertFrom-Csv.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertFrom-Json.Tests.ps1" executed="True" result="Success" success="True" time="0.0149" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertFrom-Json.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertFrom-StringData.Tests.ps1" executed="True" result="Success" success="True" time="0.0051" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertFrom-StringData.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertTo-Csv.Tests.ps1" executed="True" result="Success" success="True" time="0.0048" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertTo-Csv.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertTo-Html.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertTo-Html.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertTo-Json.PSSerializeJSONLongEnumAsNumber.Tests.ps1" executed="True" result="Success" success="True" time="0.0054" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertTo-Json.PSSerializeJSONLongEnumAsNumber.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertTo-Json.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertTo-Json.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertTo-SecureString.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertTo-SecureString.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertTo-Xml.Tests.ps1" executed="True" result="Success" success="True" time="0.0049" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ConvertTo-Xml.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Debug-Runspace.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Debug-Runspace.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Disable-PSBreakpoint.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Disable-PSBreakpoint.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Enable-PSBreakpoint.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Enable-PSBreakpoint.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Environment-Variables.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Environment-Variables.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Eventing.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Eventing.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Export-Alias.Tests.ps1" executed="True" result="Success" success="True" time="0.0046" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Export-Alias.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Export-Csv.Tests.ps1" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Export-Csv.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Export-FormatData.Tests.ps1" executed="True" result="Success" success="True" time="0.0202" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Export-FormatData.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Foreach-Object-Parallel.Tests.ps1" executed="True" result="Success" success="True" time="0.0072" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Foreach-Object-Parallel.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Format-Custom.Tests.ps1" executed="True" result="Success" success="True" time="0.0045" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Format-Custom.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Format-Hex.Tests.ps1" executed="True" result="Success" success="True" time="0.008" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Format-Hex.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Format-List.Tests.ps1" executed="True" result="Success" success="True" time="0.0085" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Format-List.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Format-Table.Tests.ps1" executed="True" result="Success" success="True" time="0.0074" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Format-Table.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Format-Wide.Tests.ps1" executed="True" result="Success" success="True" time="0.0067" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Format-Wide.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Alias.Tests.ps1" executed="True" result="Success" success="True" time="0.0155" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Alias.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Command.Tests.ps1" executed="True" result="Success" success="True" time="0.0049" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Command.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Culture.Tests.ps1" executed="True" result="Success" success="True" time="0.0043" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Culture.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Date.Tests.ps1" executed="True" result="Success" success="True" time="0.0062" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Date.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Error.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Error.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Event.Tests.ps1" executed="True" result="Success" success="True" time="0.0034" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Event.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-EventSubscriber.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-EventSubscriber.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-FileHash.Tests.ps1" executed="True" result="Success" success="True" time="0.0037" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-FileHash.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-FormatData.Tests.ps1" executed="True" result="Success" success="True" time="0.0037" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-FormatData.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Host.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Host.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Member.Tests.ps1" executed="True" result="Success" success="True" time="0.0074" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Member.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-PSBreakpoint.Tests.ps1" executed="True" result="Success" success="True" time="0.0034" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-PSBreakpoint.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-PSCallStack.Tests.ps1" executed="True" result="Success" success="True" time="0.0034" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-PSCallStack.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Random.Tests.ps1" executed="True" result="Success" success="True" time="0.0136" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Random.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-RunspaceDebug.Tests.ps1" executed="True" result="Success" success="True" time="0.0031" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-RunspaceDebug.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-SecureRandom.Tests.ps1" executed="True" result="Success" success="True" time="0.0049" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-SecureRandom.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-TraceSource.Tests.ps1" executed="True" result="Success" success="True" time="0.0031" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-TraceSource.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-UICulture.Tests.ps1" executed="True" result="Success" success="True" time="0.003" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-UICulture.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Unique.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Unique.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Uptime.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Uptime.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Variable.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Variable.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Verb.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Get-Verb.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Group-Object.Tests.ps1" executed="True" result="Success" success="True" time="0.0044" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Group-Object.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Implicit.Remoting.Tests.ps1" executed="True" result="Success" success="True" time="0.027" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Implicit.Remoting.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Import-Alias.Tests.ps1" executed="True" result="Success" success="True" time="0.0041" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Import-Alias.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Import-Csv.Tests.ps1" executed="True" result="Success" success="True" time="0.005" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Import-Csv.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Import-LocalizedData.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Import-LocalizedData.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ImportExportCSV.Delimiter.Tests.ps1" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\ImportExportCSV.Delimiter.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Invoke-Expression.Tests.ps1" executed="True" result="Success" success="True" time="0.0034" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Invoke-Expression.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Invoke-Item.Tests.ps1" executed="True" result="Success" success="True" time="0.4594" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Invoke-Item.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Invoke-Item tests on Windows" executed="True" result="Success" success="True" time="0.4536" asserts="0" description="Invoke-Item tests on Windows">
            <results>
              <test-case description="Should invoke a file without error on Windows full SKUs" name="Invoke-Item tests on Windows.Should invoke a file without error on Windows full SKUs" time="0.2773" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should start a file without error on Windows full SKUs" name="Invoke-Item tests on Windows.Should start a file without error on Windows full SKUs" time="0.0801" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Join-String.Tests.ps1" executed="True" result="Success" success="True" time="0.0041" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Join-String.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Json.Tests.ps1" executed="True" result="Success" success="True" time="0.0102" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Json.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\JsonObject.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\JsonObject.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\MarkdownCmdlets.Tests.ps1" executed="True" result="Success" success="True" time="0.0051" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\MarkdownCmdlets.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Measure-Command.Tests.ps1" executed="True" result="Success" success="True" time="0.0031" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Measure-Command.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Measure-Object.Tests.ps1" executed="True" result="Success" success="True" time="0.0109" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Measure-Object.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\MiscCmdletUpdates.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\MiscCmdletUpdates.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-Alias.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-Alias.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-Event.Tests.ps1" executed="True" result="Success" success="True" time="0.0037" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-Event.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-Guid.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-Guid.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-Object.Tests.ps1" executed="True" result="Success" success="True" time="0.0046" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-Object.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-TemporaryFile.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-TemporaryFile.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-TimeSpan.Tests.ps1" executed="True" result="Success" success="True" time="0.0042" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-TimeSpan.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-Variable.Tests.ps1" executed="True" result="Success" success="True" time="0.0041" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\New-Variable.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\object.tests.ps1" executed="True" result="Success" success="True" time="0.004" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\object.tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Out-File.Tests.ps1" executed="True" result="Success" success="True" time="0.0042" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Out-File.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Out-String.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Out-String.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\PowerShellData.tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\PowerShellData.tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Read-Host.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Read-Host.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Register-EngineEvent.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Register-EngineEvent.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Register-ObjectEvent.Tests.ps1" executed="True" result="Success" success="True" time="0.0054" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Register-ObjectEvent.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Remove-Alias.Tests.ps1" executed="True" result="Success" success="True" time="0.005" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Remove-Alias.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Remove-Event.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Remove-Event.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Remove-PSBreakpoint.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Remove-PSBreakpoint.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Remove-TypeData.Tests.ps1" executed="True" result="Success" success="True" time="0.0114" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Remove-TypeData.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Remove-Variable.Tests.ps1" executed="True" result="Success" success="True" time="0.0066" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Remove-Variable.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\RunspaceBreakpointManagement.Tests.ps1" executed="True" result="Success" success="True" time="0.0043" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\RunspaceBreakpointManagement.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\RunspaceCmdlets.Tests.ps1" executed="True" result="Success" success="True" time="0.0034" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\RunspaceCmdlets.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Select-Object.Tests.ps1" executed="True" result="Success" success="True" time="0.0083" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Select-Object.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Select-String.Tests.ps1" executed="True" result="Success" success="True" time="0.0045" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Select-String.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Select-Xml.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Select-Xml.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Send-MailMessage.Tests.ps1" executed="True" result="Success" success="True" time="0.007" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Send-MailMessage.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Set-Alias.Tests.ps1" executed="True" result="Success" success="True" time="0.004" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Set-Alias.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Set-Date.Tests.ps1" executed="True" result="Success" success="True" time="0.0576" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Set-Date.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Set-Date for admin" executed="True" result="Success" success="True" time="0.0518" asserts="0" description="Set-Date for admin">
            <results>
              <test-case description="Set-Date should be able to set the date in an elevated context" name="Set-Date for admin.Set-Date should be able to set the date in an elevated context" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Set-Date should be able to set the date with -Date parameter" name="Set-Date for admin.Set-Date should be able to set the date with -Date parameter" time="0.0263" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Set-PSBreakpoint.Tests.ps1" executed="True" result="Success" success="True" time="0.0045" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Set-PSBreakpoint.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Set-Variable.Tests.ps1" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Set-Variable.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Sort-Object.Tests.ps1" executed="True" result="Success" success="True" time="0.0089" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Sort-Object.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Start-Sleep.Tests.ps1" executed="True" result="Success" success="True" time="0.004" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Start-Sleep.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\string.tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\string.tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Tee-Object.Tests.ps1" executed="True" result="Success" success="True" time="0.0038" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Tee-Object.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Test-Json.Tests.ps1" executed="True" result="Success" success="True" time="0.0041" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Test-Json.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Trace-Command.Tests.ps1" executed="True" result="Success" success="True" time="0.0044" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Trace-Command.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\typedata.tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\typedata.tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Unblock-File.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Unblock-File.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Unimplemented-Cmdlet.Tests.ps1" executed="True" result="Success" success="True" time="0.003" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Unimplemented-Cmdlet.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Update-FormatData.Tests.ps1" executed="True" result="Success" success="True" time="0.0043" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Update-FormatData.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Update-List.Tests.ps1" executed="True" result="Success" success="True" time="0.0031" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Update-List.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Update-TypeData.Tests.ps1" executed="True" result="Success" success="True" time="0.0049" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Update-TypeData.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Wait-Debugger.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Wait-Debugger.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Wait-Event.Tests.ps1" executed="True" result="Success" success="True" time="0.0031" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Wait-Event.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\WebCmdlets.Tests.ps1" executed="True" result="Success" success="True" time="101.1665" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\WebCmdlets.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Web cmdlets tests using the cmdlet's aliases" executed="True" result="Success" success="True" time="0.1905" asserts="0" description="Web cmdlets tests using the cmdlet's aliases">
            <results>
              <test-case description="Execute Invoke-WebRequest" name="Web cmdlets tests using the cmdlet's aliases.Execute Invoke-WebRequest" time="0.1423" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Execute Invoke-RestMethod" name="Web cmdlets tests using the cmdlet's aliases.Execute Invoke-RestMethod" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Web cmdlets ignore headers with null value" name="Web cmdlets tests using the cmdlet's aliases.Web cmdlets ignore headers with null value" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C" executed="True" result="Success" success="True" time="70.2572" asserts="0" description="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C">
            <results>
              <test-case description="Invoke-WebRequest: CTRL-C Cancels request before request headers received" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-WebRequest: CTRL-C Cancels request before request headers received" time="1.0183" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-WebRequest: CTRL-C Cancels request after request headers received" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-WebRequest: CTRL-C Cancels request after request headers received" time="5.0117" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-WebRequest: HTTPS CTRL-C Cancels request after request headers" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-WebRequest: HTTPS CTRL-C Cancels request after request headers" time="5.0212" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-WebRequest: Brotli Compression CTRL-C Cancels request after request headers" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-WebRequest: Brotli Compression CTRL-C Cancels request after request headers" time="5.0057" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-WebRequest: Gzip Compression CTRL-C Cancels request after request headers" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-WebRequest: Gzip Compression CTRL-C Cancels request after request headers" time="5.0092" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-WebRequest: Gzip Compression CTRL-C Cancels request after request headers with Content-Length" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-WebRequest: Gzip Compression CTRL-C Cancels request after request headers with Content-Length" time="4.9971" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-WebRequest: Deflate Compression CTRL-C Cancels request after request headers" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-WebRequest: Deflate Compression CTRL-C Cancels request after request headers" time="5.0041" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-WebRequest: HTTPS with Brotli compression CTRL-C Cancels request after request headers" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-WebRequest: HTTPS with Brotli compression CTRL-C Cancels request after request headers" time="5.0041" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-WebRequest: HTTPS with Gzip compression CTRL-C Cancels request after request headers" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-WebRequest: HTTPS with Gzip compression CTRL-C Cancels request after request headers" time="4.9963" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-WebRequest: HTTPS with Deflate compression CTRL-C Cancels request after request headers" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-WebRequest: HTTPS with Deflate compression CTRL-C Cancels request after request headers" time="5.0015" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-WebRequest: CTRL-C Cancels file download request after request headers received" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-WebRequest: CTRL-C Cancels file download request after request headers received" time="4.9982" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-WebRequest: CTRL-C after stalled file download completes gives entire file" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-WebRequest: CTRL-C after stalled file download completes gives entire file" time="1.0111" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-RestMethod: CTRL-C Cancels request before request headers received" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-RestMethod: CTRL-C Cancels request before request headers received" time="1.0088" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-RestMethod: CTRL-C Cancels request after JSON request headers received" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-RestMethod: CTRL-C Cancels request after JSON request headers received" time="4.9979" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-RestMethod: CTRL-C after stalled JSON download processes JSON response" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-RestMethod: CTRL-C after stalled JSON download processes JSON response" time="1.0196" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-RestMethod: CTRL-C Cancels request after plain request headers received" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-RestMethod: CTRL-C Cancels request after plain request headers received" time="5.011" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-RestMethod: CTRL-C after stalled atom feed download processes atom response" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-RestMethod: CTRL-C after stalled atom feed download processes atom response" time="1.0115" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-RestMethod: CTRL-C Cancels request in XML atom processing" name="Invoke-WebRequest and Invoke-RestMethod support Cancellation through CTRL-C.Invoke-RestMethod: CTRL-C Cancels request in XML atom processing" time="4.9973" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Web cmdlets Unix Sockets tests" executed="True" result="Success" success="True" time="0.5704" asserts="0" description="Web cmdlets Unix Sockets tests">
            <results>
              <test-case description="Execute Invoke-WebRequest with -UnixSocket" name="Web cmdlets Unix Sockets tests.Execute Invoke-WebRequest with -UnixSocket" time="0.0639" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Execute Invoke-RestMethod with -UnixSocket" name="Web cmdlets Unix Sockets tests.Execute Invoke-RestMethod with -UnixSocket" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Invoke-WebRequest and Invoke-RestMethod support OperationTimeoutSeconds" executed="True" result="Success" success="True" time="30.1072" asserts="0" description="Invoke-WebRequest and Invoke-RestMethod support OperationTimeoutSeconds">
            <results>
              <test-case description="Invoke-WebRequest: OperationTimeoutSeconds does not cancel if stalls shorter than timeout but download takes longer than timeout" name="Invoke-WebRequest and Invoke-RestMethod support OperationTimeoutSeconds.Invoke-WebRequest: OperationTimeoutSeconds does not cancel if stalls shorter than timeout but download takes longer than timeout" time="8.037" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-WebRequest: OperationTimeoutSeconds cancels if stall lasts longer than OperationTimeoutSeconds value" name="Invoke-WebRequest and Invoke-RestMethod support OperationTimeoutSeconds.Invoke-WebRequest: OperationTimeoutSeconds cancels if stall lasts longer than OperationTimeoutSeconds value" time="3.0155" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-WebRequest: OperationTimeoutSeconds cancels if stall lasts longer than OperationTimeoutSeconds value for HTTPS/gzip compression" name="Invoke-WebRequest and Invoke-RestMethod support OperationTimeoutSeconds.Invoke-WebRequest: OperationTimeoutSeconds cancels if stall lasts longer than OperationTimeoutSeconds value for HTTPS/gzip compression" time="2.999" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-RestMethod: OperationTimeoutSeconds does not cancel if stalls shorter than timeout but download takes longer than timeout" name="Invoke-WebRequest and Invoke-RestMethod support OperationTimeoutSeconds.Invoke-RestMethod: OperationTimeoutSeconds does not cancel if stalls shorter than timeout but download takes longer than timeout" time="8.0145" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-RestMethod: OperationTimeoutSeconds cancels if stall lasts longer than OperationTimeoutSeconds value" name="Invoke-WebRequest and Invoke-RestMethod support OperationTimeoutSeconds.Invoke-RestMethod: OperationTimeoutSeconds cancels if stall lasts longer than OperationTimeoutSeconds value" time="1.9995" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-RestMethod: OperationTimeoutSeconds cancels when doing XML atom processing" name="Invoke-WebRequest and Invoke-RestMethod support OperationTimeoutSeconds.Invoke-RestMethod: OperationTimeoutSeconds cancels when doing XML atom processing" time="1.9996" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-RestMethod: OperationTimeoutSeconds cancels when doing JSON processing" name="Invoke-WebRequest and Invoke-RestMethod support OperationTimeoutSeconds.Invoke-RestMethod: OperationTimeoutSeconds cancels when doing JSON processing" time="1.9991" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invoke-RestMethod: OperationTimeoutSeconds cancels when doing XML atom processing for HTTPS/gzip compression" name="Invoke-WebRequest and Invoke-RestMethod support OperationTimeoutSeconds.Invoke-RestMethod: OperationTimeoutSeconds cancels when doing XML atom processing for HTTPS/gzip compression" time="1.9992" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Debug.Tests.ps1" executed="True" result="Success" success="True" time="0.0062" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Debug.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Error.Tests.ps1" executed="True" result="Success" success="True" time="0.0037" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Error.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Host.Tests.ps1" executed="True" result="Success" success="True" time="0.0043" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Host.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Output.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Output.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Progress.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Progress.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Stream.Tests.ps1" executed="True" result="Success" success="True" time="0.0036" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Stream.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Verbose.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\Write-Verbose.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\XMLCommand.Tests.ps1" executed="True" result="Success" success="True" time="0.0078" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.PowerShell.Utility\XMLCommand.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.WSMan.Management\ConfigProvider.Tests.ps1" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.WSMan.Management\ConfigProvider.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.WSMan.Management\CredSSP.Tests.ps1" executed="True" result="Success" success="True" time="0.0046" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.WSMan.Management\CredSSP.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.WSMan.Management\TestWSMan.Tests.ps1" executed="True" result="Success" success="True" time="0.0033" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\Microsoft.WSMan.Management\TestWSMan.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\PackageManagement\PackageManagement.Tests.ps1" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\PackageManagement\PackageManagement.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\PowerShellGet\PowerShellGet.Tests.ps1" executed="True" result="Success" success="True" time="0.0325" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\PowerShellGet\PowerShellGet.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\PSDiagnostics\PSDiagnostics.Tests.ps1" executed="True" result="Success" success="True" time="0.5431" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\PSDiagnostics\PSDiagnostics.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="PSDiagnostics cmdlets tests." executed="True" result="Success" success="True" time="0.5377" asserts="0" description="PSDiagnostics cmdlets tests.">
            <results>
              <test-suite type="TestFixture" name="Test for Enable-PSTrace and Disable-PSTrace cmdlets." executed="True" result="Success" success="True" time="0.2748" asserts="0" description="Test for Enable-PSTrace and Disable-PSTrace cmdlets.">
                <results>
                  <test-case description="Should enable Analytic logs for Microsoft-Windows-PowerShell." name="PSDiagnostics cmdlets tests..Test for Enable-PSTrace and Disable-PSTrace cmdlets..Should enable Analytic logs for Microsoft-Windows-PowerShell." time="0.1532" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should disable Analytic logs for Microsoft-Windows-PowerShell." name="PSDiagnostics cmdlets tests..Test for Enable-PSTrace and Disable-PSTrace cmdlets..Should disable Analytic logs for Microsoft-Windows-PowerShell." time="0.0985" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test for Get-LogProperties cmdlet." executed="True" result="Success" success="True" time="0.0618" asserts="0" description="Test for Get-LogProperties cmdlet.">
                <results>
                  <test-case description="Should return properties of Analytic logs for 'Microsoft-Windows-PowerShell'." name="PSDiagnostics cmdlets tests..Test for Get-LogProperties cmdlet..Should return properties of Analytic logs for 'Microsoft-Windows-PowerShell'." time="0.0333" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test for Set-LogProperties cmdlet." executed="True" result="Success" success="True" time="0.0901" asserts="0" description="Test for Set-LogProperties cmdlet.">
                <results>
                  <test-case description="Should invert AutoBackup setting of Analytic logs for 'Microsoft-Windows-PowerShell'." name="PSDiagnostics cmdlets tests..Test for Set-LogProperties cmdlet..Should invert AutoBackup setting of Analytic logs for 'Microsoft-Windows-PowerShell'." time="0.0485" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should throw exception for invalid LogName." name="PSDiagnostics cmdlets tests..Test for Set-LogProperties cmdlet..Should throw exception for invalid LogName." time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\PSReadLine\PSReadLine.Tests.ps1" executed="True" result="Success" success="True" time="0.0039" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\PSReadLine\PSReadLine.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Modules\ThreadJob\ThreadJob.Tests.ps1" executed="True" result="Success" success="True" time="0.0049" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Modules\ThreadJob\ThreadJob.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Provider\Pester.AutomountedDrives.Tests.ps1" executed="True" result="Success" success="True" time="0.0034" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Provider\Pester.AutomountedDrives.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\Provider\ProviderIntrinsics.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\Provider\ProviderIntrinsics.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\SDK\Breakpoint.Tests.ps1" executed="True" result="Success" success="True" time="0.004" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\SDK\Breakpoint.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\SDK\Json.Tests.ps1" executed="True" result="Success" success="True" time="0.0032" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\SDK\Json.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\PowerShell\PowerShell\test\powershell\SDK\PSDebugging.Tests.ps1" executed="True" result="Success" success="True" time="0.0066" asserts="0" description="D:\a\PowerShell\PowerShell\test\powershell\SDK\PSDebugging.Tests.ps1">
        <results />
      </test-suite>
    </results>
  </test-suite>
</test-results>
